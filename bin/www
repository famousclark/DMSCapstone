#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dms371demo:server');
var http = require('http');
var socket = require('socket.io');
var twit = require('twit');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
* Set up socket connection and establish Twit connection
*/
var io = socket(server);
var clients = {};
io.sockets.on('connection', function(socket)
{
  clients[socket.id] = socket;

  socket.on('message_to_server', function(data)
  {
    console.log(socket.id + ' just connected!');
    console.log(data);
    var dest = clients[data];

/*
    if(!dest){
      console.log('not vaild dest: '+ dest);
      return;
    }
*/

    bot.get('search/tweets', params, getData);

    socket.emit('response', 'taco');
  });
});


var bot = new twit({
    consumer_key:         'kRd17UV016MBkGNFdjoGy1UbD',
    consumer_secret:      'REWLgtZsVWsuGVXvQugMWTiiL49yfTXiSVIk6mMzGuDeXXjIkt',
    access_token:         '984582742527660032-WvPHs4LYQj7A0oax5kzVpzFbyBaGGbX',
    access_token_secret:  'LlZloMpoX7vdli2RANNzmB4tXEWXypAQJ0x9mKc0CNTXL',
    timeout_ms:           60*1000
  });

var params = 
{ 
  q: 'anime since:2011-07-11', 
  count: 20 
};

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
* Event for sending tweets to client
*/

function getData(err, data, response) 
{
  var tweetText = '';
  //taco = '';
  var tweets = data.statuses;
  for(var index = 0; index < tweets.length; index++)
  {
    console.log(tweets[index].text);
    tweetText+=' ';
    tweetText+= tweets[index].text;
  };
  taco = tweetText;
};


